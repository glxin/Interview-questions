package main

import (
	"fmt"
	"sync"
	"time"
)

type Account struct {
	ID       int
	Consumed float64
	Time     time.Time
}

type Task struct {
	ID          int
	Accounts    []Account
	PartialSum  map[int]float64
	NumMachines int
}

func main() {
	numMachines := 10

	accounts := []Account{
		{1, 10.38, time.Date(2023, time.May, 31, 14, 0, 22, 0, time.UTC)},
		{2, 20.99, time.Date(2023, time.June, 5, 9, 59, 33, 0, time.UTC)},
		{1, 34.88, time.Date(2023, time.May, 31, 15, 41, 22, 0, time.UTC)},
		// 添加更多账户数据...
	}

	// 创建任务队列，并向其中添加任务
	tasks := make(chan Task, numMachines)

	for machineID := 0; machineID < numMachines; machineID++ {
		task := Task{
			ID:         machineID,
			Accounts:   accounts,
			PartialSum: make(map[int]float64),
			// ResultMutex: &resultMutex,
			NumMachines: numMachines,
		}

		tasks <- task
	}

	close(tasks)

	// 使用 WaitGroup 等待所有任务完成
	var wg sync.WaitGroup
	wg.Add(numMachines)

	// 使用协程池处理任务
	for i := 0; i < numMachines; i++ {
		go func() {
			defer wg.Done()

			for task := range tasks {
				processTask(&task)
			}
		}()
	}
	// 等待所有任务完成
	wg.Wait()
	// 对所有任务的部分结果进行合并
	totalConsumption := make(map[int]float64)

	for k := range accounts {
		totalConsumption[accounts[k].ID] += accounts[k].Consumed
	}

	// 打印各账户的总消费结果
	for accountID, consumption := range totalConsumption {
		fmt.Printf("账户 %d 的总消费为 %.2f\n", accountID, consumption)
	}
}

func processTask(task *Task) {
	for _, account := range task.Accounts {
		if account.ID%task.NumMachines == task.ID {
			task.PartialSum[account.ID] += account.Consumed
		}
	}
}
